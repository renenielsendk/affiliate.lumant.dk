model Broadcast {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  status         BroadcastStatus
  name           String
  subject        String?
  senderName     String?
  replyTo        String?
  body           String?
  instructor     Instructor      @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId   String          @db.ObjectId
  scheduledAt    DateTime?
  emailReference String?
  contactListIds String[]
  email          Email?          @relation(fields: [emailId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  emailId        String?         @unique @db.ObjectId

  @@map("broadcasts")
}

enum BroadcastStatus {
  DRAFT
  QUEUED
  SCHEDULED
  DISPATCHED
}

model Email {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  status         EmailStatus
  senderName     String?
  replyTo        String?
  subject        String?
  body           String?
  useTemplate    Boolean          @default(false)
  broadcast      Broadcast?
  recipients     EmailRecipient[]
  instructor     Instructor       @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId   String           @db.ObjectId
  tagId          String?
  dispatchedAt   DateTime?
  dispatchedHtml String?

  @@map("emails")
}

enum EmailStatus {
  QUEUED
  SENT
  FAILED
}

type EmailRecipient {
  email     String
  name      String?
  reference String?
  contactId String?
}
