model Course {
  id                     String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  publishedAt            DateTime?
  reference              String                  @unique
  imageMedia             Media?                  @relation("CourseImageMedia", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  imageMediaId           String?                 @db.ObjectId
  title                  String
  internalName           String?
  description            String?
  introductionText       String?
  instructor             Instructor              @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId           String                  @db.ObjectId
  rating                 Float
  learnings              String[]
  requirements           String[]
  subTitle               String?
  previewMedia           Media?                  @relation("CourseImagePreview", fields: [previewMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  previewMediaId         String?                 @db.ObjectId
  price                  Float
  discountPrice          Float?
  priceIsWithVat         Boolean?                @default(true)
  discountExpiresAt      DateTime?
  publicationStatus      CoursePublicationStatus @default(PUBLISHED)
  enrollmentAccessInDays Int?
  sections               CourseSection[]
  lections               CourseLection[]
  students               CourseEnrollment[]
  tags                   String[]
  landingPage            LandingPage?
  paymentLinks           PaymentLink[]
  allowQuantity          Boolean?
  userProductActivity    UserProductActivity[]
  prices                 ProductPrice[]
  isArchived             Boolean?                @default(false)
  checkoutCustomFields   CheckoutCustomField[]
  checkoutSettings       CheckoutSettings?
  receiptSettings        ReceiptSettings?
  enrollments            ProductEnrollment[]
  maxPurchases           Int?
  exemptFromTax          Boolean?                @default(false)

  @@map("courses")
}

enum CoursePublicationStatus {
  DRAFT
  PREORDER
  PUBLISHED
}

model CourseSection {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  publishedAfterDate  DateTime?
  description         String?
  title               String
  order               Int?
  course              Course?             @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId            String              @db.ObjectId
  instructorId        String              @db.ObjectId
  lections            CourseLection[]
  status              CourseContentStatus @default(DRAFT)
  publishOnDateTime   DateTime?
  publishAfterDays    Int?
  publishEmailMessage String?

  @@map("course-sections")
}

enum CourseContentStatus {
  PUBLISHED
  DRAFT
  DRIPPED
  SCHEDULED
  MANUALLY
}

model CourseLection {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  type                CourseLectionType
  title               String
  order               Int?
  preview             Boolean?
  text                String?
  courseSection       CourseSection       @relation(fields: [courseSectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseSectionId     String              @db.ObjectId
  course              Course              @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId            String              @db.ObjectId
  media               Media?              @relation("CourseLectionMedia", fields: [mediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  mediaId             String?             @db.ObjectId
  thumbnail           Media?              @relation("CourseLectionThumbnail", fields: [thumbnailId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  thumbnailId         String?             @db.ObjectId
  instructorId        String              @db.ObjectId
  attachmentIds       String[]            @default([]) @db.ObjectId
  status              CourseContentStatus @default(DRAFT)
  publishOnDateTime   DateTime?
  publishAfterDays    Int?
  publishEmailMessage String?
  quiz                Quiz?               @relation(fields: [quizId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  quizId              String?             @db.ObjectId

  @@map("course-lections")
}

enum CourseLectionType {
  video
  audio
  text
  pdf
  QUIZ
}

model CourseEnrollment {
  id                     String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  course                 Course      @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  courseId               String      @db.ObjectId
  user                   User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId                 String      @db.ObjectId
  enrollmentAccessInDays Int?
  active                 Boolean
  progressInPercent      Int         @default(0)
  instructor             Instructor? @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId           String?     @db.ObjectId

  @@map("course-enrollments")
}
