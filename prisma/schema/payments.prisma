model Payment {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  user           User                 @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId         String               @db.ObjectId
  instructor     Instructor           @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId   String               @db.ObjectId
  currency       String               @default("DKK")
  vatRate        Float                @default(0.25)
  status         PaymentStatus
  paymentMethod  String?
  productPrice   ProductPrice         @relation(fields: [productPriceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productPriceId String               @db.ObjectId
  charges        PaymentCharge[]
  customFields   PaymentCustomField[]
  reference      String

  @@map("payments")
}

type PaymentCustomField {
  label String
  value String
  type  String
}

model PaymentCharge {
  // Required
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  paidAt             DateTime?
  payment            Payment              @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  paymentId          String               @db.ObjectId
  dueDate            DateTime
  amountDue          Float
  amountPaid         Float
  amountRefunded     Float                @default(0)
  status             PaymentChargeStatus
  type               PaymentChargeType
  reference          String
  collectionAttempts Int                  @default(0)
  // Optional
  refundReason       String?
  refundedAt         DateTime?
  installmentNumber  Int?
  paymentOrigin      PaymentChargeOrigin?
  paymentIntentId    String?
  invoices           Invoice[]

  @@map("payment-charges")
}

enum PaymentChargeOrigin {
  USER
  MANUALLY_PAID
}

enum PaymentChargeType {
  INSTALLMENT
  ONE_TIME
}

type PaymentLine {
  createdAt DateTime @default(now())
  quantity  Int
  amount    Float
  text      String
}

enum PaymentChargeStatus {
  SCHEDULED
  INITIATED
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
  DELETED
  MANUAL_COLLECTION_NEEDED
}

enum PaymentStatus {
  PAID
  INITIATED
}
