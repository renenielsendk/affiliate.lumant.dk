model User {
  // Required
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  email                      String
  name                       String
  connectedInstructorIds     String[]                    @db.ObjectId
  // Optional
  phone                      String?
  phoneCountryCode           String?
  instructor                 Instructor?                 @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId               String?                     @db.ObjectId
  isAdmin                    Boolean?
  accountingId               String?
  origin                     SignupOrigin?
  avatarMediaUrl             String?                     @db.ObjectId
  affiliate                  SaasAffiliate?              @relation(fields: [affiliateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  affiliateId                String?                     @db.ObjectId
  // Relations
  reviews                    Review[]
  courses                    CourseEnrollment[]
  orders                     Order[]
  contactEntries             Contact[]
  membershipClubEnrollments  MembershipClubEnrollment[]
  membershipClubPosts        MembershipClubPost[]
  courseProgress             UserProductActivity[]
  payments                   Payment[]
  subscriptions              Subscription[]
  quizResponses              QuizResponse[]
  productEnrollments         ProductEnrollment[]
  membershipClubPostComments MembershipClubPostComment[]

  @@map("users")
}

model Contact {
  // Required
  id                      String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  isSubscribed            Boolean                  @default(false)
  instructor              Instructor               @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId            String                   @db.ObjectId
  reference               String                   @unique
  // Optional
  email                   String?
  phone                   String?
  subscribedAt            DateTime?
  unsubscribedAt          DateTime?
  notes                   String?
  ipAddress               String?
  origin                  String?
  name                    String?
  user                    User?                    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId                  String?                  @unique @db.ObjectId
  tagIds                  String[]                 @db.ObjectId
  // Relations
  contactLists            ContactListMember[]
  emails                  ContactEmails[]
  automationSubscriptions AutomationSubscription[]

  @@map("contacts")
}

model ContactEmails {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  contact      Contact    @relation(fields: [contactId], references: [id], onDelete: NoAction)
  contactId    String     @db.ObjectId
  htmlContent  String?
  subject      String?
  senderName   String?
  replyTo      String?
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: NoAction)
  instructorId String     @db.ObjectId
}

type UserProductActivityEntry {
  type      UserProductActivityEntryType?
  createdAt DateTime                      @default(now())
  lectionId String                        @db.ObjectId
}

enum UserProductActivityEntryType {
  COMPLETED_LECTION
}

model UserProductActivity {
  id                String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  user              User                       @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId            String                     @db.ObjectId
  product           Course                     @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId         String                     @db.ObjectId
  activity          UserProductActivityEntry[]
  progressInPercent Int                        @default(0)

  @@map("user-product-activity")
}
