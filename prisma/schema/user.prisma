model User {
  // Required
  id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  email                      String
  name                       String
  connectedInstructorIds     String[]                    @db.ObjectId
  // Optional
  phone                      String?
  phoneCountryCode           String?
  instructor                 Instructor?                 @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId               String?                     @db.ObjectId
  isAdmin                    Boolean?
  accountingId               String?
  origin                     SignupOrigin?
  avatarMediaUrl             String?                     @db.ObjectId
  affiliate                  SaasAffiliate?              @relation(fields: [affiliateId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  affiliateId                String?                     @db.ObjectId
  // Relations
  courses                    CourseEnrollment[]
  contactEntries             Contact[]
  membershipClubEnrollments  MembershipClubEnrollment[]
  membershipClubPosts        MembershipClubPost[]
  courseProgress             UserProductActivity[]
  payments                   Payment[]
  subscriptions              Subscription[]
  quizResponses              QuizResponse[]
  productEnrollments         ProductEnrollment[]
  membershipClubPostComments MembershipClubPostComment[]
  instructorAccesses         UserInstructorAccess[]
  notifications              NotificationsUser[]
  invoices                   Invoice[]

  @@map("users")
}

type UserProductActivityEntry {
  type      UserProductActivityEntryType?
  createdAt DateTime                      @default(now())
  lectionId String                        @db.ObjectId
}

enum UserProductActivityEntryType {
  COMPLETED_LECTION
}

model UserProductActivity {
  id                String                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  user              User                       @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId            String                     @db.ObjectId
  product           Course                     @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId         String                     @db.ObjectId
  activity          UserProductActivityEntry[]
  progressInPercent Int                        @default(0)

  @@map("user-product-activity")
}

model UserInstructorAccess {
  id           String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  role         UserInstructorAccessRole
  user         User                     @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId       String                   @db.ObjectId
  instructor   Instructor               @relation(fields: [instructorId], references: [id], onDelete: NoAction)
  instructorId String                   @db.ObjectId
}

enum UserInstructorAccessRole {
  ADMIN
}
