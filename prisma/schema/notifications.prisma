model NotificationsInstructor {
  id              String                      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  notifiedByEmail NotificationEmailStatus     @default(NOT_DISPATCHED)
  markedAsRead    Boolean                     @default(false)
  instructor      Instructor                  @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId    String                      @db.ObjectId
  type            NotificationsInstructorType
  data            Json

  @@map("instructor-notifications")
}

enum NotificationsInstructorType {
  NEW_ENROLLMENT
}

model NotificationsUser {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  notifiedByEmail NotificationEmailStatus @default(NOT_DISPATCHED)
  markedAsRead    Boolean                 @default(false)
  user            User                    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId          String                  @db.ObjectId
  type            NotificationsUserType
  data            Json

  @@map("user-notifications")
}

enum NotificationEmailStatus {
  NOT_DISPATCHED
  DISPATCHED
  UNSUBSCRIBED
  FAILED
}

enum NotificationsUserType {
  NEW_PAYMENT
}
