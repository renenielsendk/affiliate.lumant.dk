model Contact {
  // Required
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isSubscribed Boolean  @default(false)
  reference    String   @unique

  // Optional
  email                     String?
  phone                     String?
  subscribedAt              DateTime?
  unsubscribedAt            DateTime?
  notes                     String?
  ipAddress                 String?
  origin                    String?
  name                      String?
  tagIds                    String[]  @db.ObjectId
  firstName                 String?
  lastName                  String?
  paymentProviderCustomerId String?

  // Relations
  instructor              Instructor               @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId            String                   @db.ObjectId
  user                    User?                    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId                  String?                  @unique @db.ObjectId
  contactLists            ContactListMember[]
  emails                  ContactEmails[]
  automationSubscriptions AutomationSubscription[]

  @@map("contacts")
}

model ContactEmails {
  // Required
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String

  // Relations
  contact      Contact    @relation(fields: [contactId], references: [id], onDelete: NoAction)
  contactId    String     @db.ObjectId
  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: NoAction)
  instructorId String     @db.ObjectId

  // Optional
  htmlContent String?
  subject     String?
  senderName  String?
  replyTo     String?

  @@map("contact-emails")
}

model ContactList {
  // Required
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  reference String   @unique
  isDefault Boolean  @default(false)

  // Optional
  internalName            String?
  afterConversionSettings ContactListAfterConversionSettings?

  // Relations
  instructor   Instructor          @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId String              @db.ObjectId
  contacts     ContactListMember[]

  @@map("contact-lists")
}

type ContactListAfterConversionSettings {
  redirectUrl String?
}

model ContactListMember {
  // Required
  id        String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  status    ContactListMemberStatus @default(SUBSCRIBED)

  // Relations
  contact       Contact     @relation(fields: [contactId], references: [id])
  contactId     String      @db.ObjectId
  contactList   ContactList @relation(fields: [contactListId], references: [id])
  contactListId String      @db.ObjectId

  @@unique([contactId, contactListId])
  @@map("contact-list-members")
}

enum ContactListMemberStatus {
  SUBSCRIBED
  UNSUBSCRIBED
}

model ContactBatchImport {
  // Required
  id                String                    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  status            ContactBatchImportStatus  @default(PENDING)
  items             ContactBatchImportItem[]
  importedFrom      ContactBatchImportOrigin?
  importedFromOther String?
  type              ContactBatchImportType
  fileContent       String?

  // Relations
  instructor    Instructor @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId  String     @db.ObjectId
  contactListId String?    @db.ObjectId

  @@map("contact-batch-imports")
}

enum ContactBatchImportOrigin {
  NOT_SELECTED
  CLICKFUNNELS
  EASY
  KAJABI
  KIT
  LUMANT
  MAILCHIMP
  SIMPLERO
  TEACHABLE
  THINKIFIC
  MONEY_MAKER_STUDIO
  OTHER
}

enum ContactBatchImportStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ContactBatchImportType {
  CSV
}

model ContactBatchImportItem {
  // Required
  id           String                       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime                     @updatedAt
  status       ContactBatchImportItemStatus @default(PENDING)
  email        String
  firstName    String
  lastName     String?
  phone        String?
  subscribedAt DateTime?

  // Relations
  batchImport   ContactBatchImport @relation(fields: [batchImportId], references: [id])
  batchImportId String             @db.ObjectId

  @@map("contact-batch-import-items")
}

enum ContactBatchImportItemStatus {
  PENDING
  IMPORTED
  FAILED
}
