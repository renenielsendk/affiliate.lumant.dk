model Automation {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  name          String
  steps         AutomationStep[]
  instructor    Instructor               @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId  String                   @db.ObjectId
  subscriptions AutomationSubscription[]
  triggers      AutomationTrigger[]
  isActive      Boolean                  @default(true)
  template      AutomationTemplate?

  @@map("automations")
}

enum AutomationTemplate {
  FREEBIE_BOOK_MEETING_FLOW
  FREEBIE_PRODUCT_SALES_FLOW
  EMPTY
}

model AutomationTrigger {
  id           String                @id @default(auto()) @map("_id") @db.ObjectId
  automation   Automation            @relation(fields: [automationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  automationId String                @db.ObjectId
  type         AutomationTriggerType // Type of trigger
  conditions   Json // JSON object for custom conditions (e.g., { "progress": 80 })
  createdAt    DateTime              @default(now())

  @@map("automation-triggers")
}

enum AutomationTriggerType {
  LIST_SUBSCRIPTION_ADDED
  LIST_SUBSCRIPTION_REMOVED
  SUBSCRIPTION_CANCELLED
  ABANDONED_CART
  NEW_PRODUCT_ENROLLMENT
  NEW_MEMBERSHIP_CLUB_ENROLLMENT
}

model AutomationStep {
  id            String                   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  automation    Automation               @relation(fields: [automationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  automationId  String                   @db.ObjectId
  content       Json
  order         Int
  type          AutomationStepType
  progress      AutomationProgress[]
  isActive      Boolean                  @default(false)
  subscriptions AutomationSubscription[]

  @@map("automation-steps")
}

enum AutomationStepType {
  SEND_EMAIL
  WAIT_TIME
  WAIT_UNTIL
  PRODUCT_ENROLL_USER
}

model AutomationSubscription {
  // Required
  id            String                       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime                     @default(now())
  updatedAt     DateTime                     @updatedAt
  contact       Contact                      @relation(fields: [contactId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contactId     String                       @db.ObjectId
  automation    Automation                   @relation(fields: [automationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  automationId  String                       @db.ObjectId
  status        AutomationSubscriptionStatus @default(PENDING)
  // Optional
  currentStep   AutomationStep?              @relation(fields: [currentStepId], references: [id])
  currentStepId String?                      @db.ObjectId
  nextStepAt    DateTime?
  // Relations
  progress      AutomationProgress[]

  @@map("automation-subscriptions")
}

enum AutomationSubscriptionStatus {
  PENDING
  ACTIVE
  FINISHED
  EXITED_EARLY
}

model AutomationProgress {
  id             String                           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime                         @default(now())
  updatedAt      DateTime                         @updatedAt
  subscription   AutomationSubscription           @relation(fields: [subscriptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscriptionId String                           @db.ObjectId
  step           AutomationStep                   @relation(fields: [stepId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stepId         String                           @db.ObjectId
  completedAt    DateTime?
  completionType AutomationProgressCompletionType @default(IN_PROGRESS)
  emailId        String?                          @db.ObjectId
  email          Email?                           @relation(fields: [emailId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("automation-progress")
}

enum AutomationProgressCompletionType {
  SKIPPED
  COMPLETED
  IN_PROGRESS
}
