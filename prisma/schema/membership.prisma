model MembershipClub {
  id                   String                      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  instructor           Instructor                  @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId         String                      @db.ObjectId
  imageMedia           Media?                      @relation("MembershipClubImageMedia", fields: [imageMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  imageMediaId         String?                     @db.ObjectId
  name                 String
  tagLine              String?
  status               MembershipClubStatus        @default(ACTIVE)
  bannerMedia          Media?                      @relation("MembershipClubBannerMedia", fields: [bannerMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  bannerMediaId        String?                     @db.ObjectId
  enrollments          MembershipClubEnrollment[]
  posts                MembershipClubPost[]
  prices               ProductPrice[]
  reference            String
  contentPages         MembershipClubContentPage[]
  menuItems            MembershipClubMenuItem[]
  checkoutCustomFields CheckoutCustomField[]
  checkoutSettings     CheckoutSettings?
  receiptSettings      ReceiptSettings?
  slug                 String

  @@map("membership-clubs")
}

type MembershipClubMenuItem {
  title         String?
  url           String?
  icon          String?
  contentPageId String?
}

model MembershipClubContentPage {
  // Required
  id                String                                     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime                                   @default(now())
  updatedAt         DateTime                                   @updatedAt
  membershipClub    MembershipClub                             @relation(fields: [membershipClubId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  membershipClubId  String                                     @db.ObjectId
  title             String
  publicationStatus MembershipClubContentPagePublicationStatus @default(PUBLISHED)
  slug              String
  type              MembershipClubContentPageType              @default(PRODUCT_LIST)
  layout            MembershipClubContentPageLayout            @default(DEFAULT)
  access            MembershipClubContentPageAccess            @default(PUBLIC)
  order             Int                                        @default(0)
  // Optional
  permissions       MembershipClubContentPagePermissions?
  bannerMedia       Media?                                     @relation("MembershipClubContentPageBannerMedia", fields: [bannerMediaId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  bannerMediaId     String?                                    @db.ObjectId
  content           Json?
  icon              String?
  // Relations
  posts             MembershipClubPost[]

  @@map("membership-club-custom-pages")
}

enum MembershipClubContentPageAccess {
  PUBLIC
  PRIVATE
  DRAFT
}

type MembershipClubContentPagePermissions {
  canCreatePosts    Boolean @default(false)
  canCreateComments Boolean @default(false)
}

enum MembershipClubContentPageLayout {
  DEFAULT
  GRID
  LIST
}

enum MembershipClubContentPageType {
  PRODUCT_LIST
  VIDEO_LIST
  COMMUNITY
}

enum MembershipClubContentPagePublicationStatus {
  DRAFT
  PUBLISHED
}

enum MembershipClubStatus {
  ACTIVE
  INACTIVE
}

model MembershipClubEnrollment {
  id               String                         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime                       @default(now())
  updatedAt        DateTime                       @updatedAt
  membershipClub   MembershipClub                 @relation(fields: [membershipClubId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  membershipClubId String                         @db.ObjectId
  user             User                           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           String                         @db.ObjectId
  instructor       Instructor                     @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId     String                         @db.ObjectId
  status           MembershipClubEnrollmentStatus @default(ACTIVE)

  @@map("membership-club-enrollments")
}

enum MembershipClubEnrollmentStatus {
  ACTIVE
  INACTIVE
}

model MembershipClubPost {
  id               String                        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  title            String?
  membershipClub   MembershipClub                @relation(fields: [membershipClubId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  membershipClubId String                        @db.ObjectId
  user             User                          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId           String                        @db.ObjectId
  instructor       Instructor?                   @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId     String?                       @db.ObjectId
  content          String
  pinned           Boolean                       @default(false)
  attachment       MembershipClubPostAttachment?
  contentPage      MembershipClubContentPage?    @relation(fields: [contentPageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contentPageId    String?                       @db.ObjectId
  comments         MembershipClubPostComment[]
  thumbnailUrl     String?

  @@map("membership-club-posts")
}

model MembershipClubPostComment {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  post         MembershipClubPost @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  postId       String             @db.ObjectId
  user         User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId       String             @db.ObjectId
  content      String
  instructor   Instructor?        @relation(fields: [instructorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  instructorId String?            @db.ObjectId

  @@map("membership-club-post-comments")
}

type MembershipClubPostAttachment {
  url  String
  type MembershipClubPostAttachmentType
}

enum MembershipClubPostAttachmentType {
  IMAGE
  VIDEO
}
